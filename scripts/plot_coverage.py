#!/bin/python

import sys
import numpy as np
from PlotDisttributionTrans import *
from TranscriptClass import *


if __name__ == "__main__":
	if len(sys.argv) == 1:
		print("Usage:")
		print("\tpython3 plot_coverage.py <expected distribution.dat> <observed distribution.dat> <SAD prefix> <annotation gtf file> <transcript id> <output file>")
		print("\tpython3 plot_coverage.py <expected distribution.dat> <observed distribution.dat> <SAD prefix> <annotation gtf file> <two transcript ids> <output file>")
		print("Input specification:")
		print("\texpected distribution.dat: the .dat file generated by readsalmonbias or readrsembias.")
		print("\tobserved distribution.dat: the .dat file generated by transcovdist or rsemobs.")
		print("\tSAD prefix: the output prefix of SAD (including path).")
		print("\tannotation gtf file: the GTF file used in SAD.")
		print("\ttranscript id or two transcript ids: the transcript(s) to show the coverage distribution. When two transcript ids are provided, they should be delimited by \":\" and should be two isoforms from the same gene.")
		print("\toutput file: the output plot file name (including figure format extension).")
	else:
		ExpectedFile = sys.argv[1]
		ObservedFile = sys.argv[2]
		SADPrefix = sys.argv[3]
		AdjExpectedFile = SADPrefix + "_expectedbinnorm.dat"
		AdjObservedFile = SADPrefix + "_adjusted_observed_distribution.dat"
		CovarianceFile = SADPrefix + "_covariance.dat"
		GTFFile = sys.argv[4]
		tids = sys.argv[5]
		OutputFile = sys.argv[6]

		Expected = ReadRawCorrection(ExpectedFile)
		AdjExpected = ReadAjustedTheoDistribution(AdjExpectedFile, Expected)
		Observed = ReadRawStartPos(ObservedFile)
		AdjObserved = ReadLPAdjustment(SADPrefix + "_adjusted")
		[Covariances, LenClass] = ReadCovariance(CovarianceFile)
		Transcripts = ReadGTF(GTFFile)
		# for the transcripts excluded from the adjustment, make the adjusted observed distribution the same as the original.
		for k,v in Observed.items():
			if not (k in AdjObserved):
				AdjObserved[k] = v
		
		# determine whether to plot one transcript or two
		if not (":" in tids):
			t = tids
			if np.sum(np.abs(Observed[t] - AdjObserved[t])) < 1e-8:
				print("Observed coverage of transcript "+t+" has not been adjusted.")
			fig, ((ax1, ax3), (ax2, ax4)) = plt.subplots(2, 2, sharex='col', figsize=(16, 6.5))
			ax1 = PlotDist_ribbon_v2(ax1, Expected[t], Observed[t], Covariances[LenClass[t]], "unadjusted expected, unadjusted observed: "+t, legend_bottom=None, coordinate="transcript")
			ax2 = PlotDist_ribbon_v2(ax2, AdjExpected[t], Observed[t], Covariances[LenClass[t]], "adjusted expected, unadjusted observed: "+t, legend_bottom=True, coordinate="transcript")
			ax3 = PlotDist_ribbon_v2(ax3, Expected[t], AdjObserved[t], Covariances[LenClass[t]], "unadjusted expected, adjusted observed: "+t, legend_bottom=None, coordinate="transcript")
			ax4 = PlotDist_ribbon_v2(ax4, AdjExpected[t], AdjObserved[t], Covariances[LenClass[t]], "adjusted expected, adjusted observed: "+t, legend_bottom=True, coordinate="transcript")
			fig.subplots_adjust(left=0.05, right=0.975, hspace=0.3, bottom = 0.15)
			fig.savefig(OutputFile, transparent=True)
		else:
			t1 = tids.split(":")[0]
			t2 = tids.split(":")[1]
			assert(t1 in Transcripts)
			assert(t2 in Transcripts)
			sharedexons = GetSharedExon(Transcripts, [t1, t2])

			if np.sum(np.abs(Observed[t1] - AdjObserved[t1])) < 1e-8:
				print("Observed coverage of transcript "+t1+" has not been adjusted.")
			if np.sum(np.abs(Observed[t2] - AdjObserved[t2])) < 1e-8:
				print("Observed coverage of transcript "+t2+" has not been adjusted.")

			fig, ((ax1, ax5), (ax2, ax6), (ax3, ax7), (ax4, ax8)) = plt.subplots(4, 2, sharex='col', figsize=(16, 13))
			ax1 = PlotDist_ribbon_v2(ax1, ConvertCoordinate(Expected[t1], Transcripts, sharedexons, t1), ConvertCoordinate(Observed[t1], Transcripts, sharedexons, t1), Covariances[LenClass[t1]], "unadjusted expected, unadjusted observed: "+t1, binsize=25, legend_bottom=None, coordinate="gene", ytop_lim=None)
			ax2 = PlotDist_ribbon_v2(ax2, ConvertCoordinate(Expected[t2], Transcripts, sharedexons, t2), ConvertCoordinate(Observed[t2], Transcripts, sharedexons, t2), Covariances[LenClass[t2]], "unadjusted expected, unadjusted observed: "+t2, binsize=25, legend_bottom=None, coordinate="gene", ytop_lim=None)

			ax5 = PlotDist_ribbon_v2(ax5, ConvertCoordinate(AdjExpected[t1], Transcripts, sharedexons, t1), ConvertCoordinate(Observed[t1], Transcripts, sharedexons, t1), Covariances[LenClass[t1]], "adjusted expected, unadjusted observed: "+t1, binsize=25, legend_bottom=None, coordinate="gene", ytop_lim=None)
			ax6 = PlotDist_ribbon_v2(ax6, ConvertCoordinate(AdjExpected[t2], Transcripts, sharedexons, t2), ConvertCoordinate(Observed[t2], Transcripts, sharedexons, t2), Covariances[LenClass[t2]], "adjusted expected, unadjusted observed: "+t2, binsize=25, legend_bottom=None, coordinate="gene", ytop_lim=None)
			

			ax3 = PlotDist_ribbon_v2(ax3, ConvertCoordinate(Expected[t1], Transcripts, sharedexons, t1), ConvertCoordinate(AdjObserved[t1], Transcripts, sharedexons, t1), Covariances[LenClass[t1]], "unadjusted expected, adjusted observed: "+t1, binsize=25, legend_bottom=None, coordinate="gene", ytop_lim=None)
			ax4 = PlotDist_ribbon_v2(ax4, ConvertCoordinate(Expected[t2], Transcripts, sharedexons, t2), ConvertCoordinate(AdjObserved[t2], Transcripts, sharedexons, t2), Covariances[LenClass[t2]], "unadjusted expected, adjusted observed: "+t2, binsize=25, legend_bottom=True, coordinate="gene", ytop_lim=None)

			ax7 = PlotDist_ribbon_v2(ax7, ConvertCoordinate(AdjExpected[t1], Transcripts, sharedexons, t1), ConvertCoordinate(AdjObserved[t1], Transcripts, sharedexons, t1), Covariances[LenClass[t1]], "adjusted expected, adjusted observed: "+t1, binsize=25, legend_bottom=None, coordinate="gene", ytop_lim=None)
			ax8 = PlotDist_ribbon_v2(ax8, ConvertCoordinate(AdjExpected[t2], Transcripts, sharedexons, t2), ConvertCoordinate(AdjObserved[t2], Transcripts, sharedexons, t2), Covariances[LenClass[t2]], "adjusted expected, adjusted observed: "+t2, binsize=25, legend_bottom=True, coordinate="gene", ytop_lim=None)

			fig.subplots_adjust(left=0.05, right=0.975, hspace=0.3, bottom = 0.15)
			fig.savefig(OutputFile, transparent=True)
